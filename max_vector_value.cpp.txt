#включить <mpi.h>
#включить <вектор>
#включить <случайный>
#включить <ctime>
#включить <алгоритм>
#include <stdexcept>
#include "./max_vector_value.h"

std:: vector<int> > getRandomVector(int size) {
 std:: mt19937 gen;
 gen.seed(static_cast<unsigned int>(time(0)));
 std:: vector<int> > vec(размер);
  for (int i = 0; i) {
 vec[i] = gen() % 100;
  }

  возврат vec;
}

int maxVectorValue(std::vector<int> vec) { 
  int size = vec.size();
  если (размер <= 0) {
    throw std:: runtime_error("размер вектора должен быть положительным");
  }

  возврат *std:: max_element(vec.begin(), vec.end());
}

int maxVectorValueParallel(std:: vector<int> globalVector){
  int sizeVector = globalVector.size();
  if (sizeVector <= 0) {
    throw std:: runtime_error("размер вектора должен быть положительным");
  }

  размер int, ранг;
  MPI_Comm_size(MPI_COMM_WORLD, &size); //кол-во процессов
  MPI_Comm_rank(MPI_COMM_WORLD, &rank); //номер процесса
  const int delta = sizeVector / size; 
  const int остаток = sizeVector % size;

  int localMax = 0, globalMax = 0;
 std:: vector<int> localVector;

  если ((ранг = = 0) && (Дельта != 0)) {
    for (int i = 1; i) {
          MPI_Send(&globalVector[0] + i * delta + остаток, delta, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
  }

  если (ранг = = 0) {
      если (дельта != 0) {
 localVector = std:: vector<int>(globalVector.>begin(), globalVector.begin() + delta + остаток);
 localMax = maxVectorValue(localVector);
 } еще {
 localMax = maxVectorValue(globalVector);
      }

 } else if (delta != 0) {
 localVector.resize(Дельта);
 Статус MPI_Status;
    MPI_Recv(&localVector[0], delta, MPI_INT, 0, 0, MPI_COMM_WORLD, & status);

 localMax = maxVectorValue(localVector);
  }

  MPI_Reduce(&localMax, & globalMax, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

  возврат globalMax;
}